#!/bin/bash

# Initialize variables to store flag values
arg_d=false
arg_p=false

# Loop to parse command-line options using getopts
while getopts ":dp" opt; do
  case $opt in
    d)
      arg_d=true
      ;;
    p)
      arg_p=true
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done

# Check if both -d and -p flags are passed; if so, print an error message and exit with status code 1
if [[ "$arg_d" == "true" ]] && [[ "$arg_p" == "true" ]]; then
  echo "Error: Options -d and -p cannot be used together." >&2
  exit 1
# Check if neither -d nor -p flags are passed; if so, print an error message and exit with status code 1
elif [[ "$arg_d" == "false" ]] && [[ "$arg_p" == "false" ]]; then
  echo "Error: One of the options -d or -p must be used." >&2
  exit 1
fi

# Remove the flags that have already been parsed
shift $((OPTIND-1))

# Set.start-app-environment variables based on the selected flag
if [[ "$arg_d" == "true" ]]; then
  # Extract the development section from the .start-app-env file and set the.start-app-environment variables
  grep -A1000 '^# Development' .start-app-env | grep -B1000 '^# Production' | sed -e '1d;$d' | while read -r line; do
    export "$line"
  done
  # Fetch the local IPv4 address using the AWS Metadata Service
  LOCAL_IPV4=$(curl -s --connect-timeout 5 http://169.254.169.254/latest/meta-data/local-ipv4)

  # Check if the curl command was successful
  if [[ $? -eq 0 ]] && [[ -n "$LOCAL_IPV4" ]]; then
    # Set the IP address as the MYSQL_HOST_IP_OR_HOSTNAME environment variable
    export MYSQL_HOST_IP_OR_HOSTNAME=$LOCAL_IPV4
  else
    # Print an error message and exit with status code 1
    echo "Error: Unable to fetch the local IPv4 address from the AWS Metadata Service." >&2
    exit 1
  fi
elif [[ "$arg_p" == "true" ]]; then
  # Extract the production section from the .start-app-env file and set the.start-app-environment variables
  grep -A1000 '^# Production' .start-app-env | while read -r line; do
    # Ignore comments
    if [[ ! "$line" =~ ^#.* ]]; then
      export "$line"
    fi
  done
fi

# Run the sudo docker-compose command based on the selected flag
if [[ "$arg_d" == "true" ]]; then
  sudo docker-compose -f docker-compose-development.yml up --build
elif [[ "$arg_p" == "true" ]]; then
  sudo docker-compose -f docker-compose-production.yml up --build
fi

# Rest of your script starts here

